import LogError
import datetime
import SQLite
from Site import Site
class Texto:
    
    def __init__(self):
        self.nomeDominio = ""
        self.descricaoURL = ""
        self.sequencia = 0
        self.tamanho = 0
        self.font = ""
        self.cor = ""
        self.tamanhoFont = 0        
        self.timeStamp = datetime.datetime.now()
        self.SQLiteConnection = SQLite.SQLite()
        
    def Insert(self):
        try:
            if(self.nomeDominio == "" or self.descricaoURL == "" or self.sequencia <= 0):
                raise("O nome do dominio, a descrição da URL e a sequencia não podem ser vazio.")
           
            site = Site()
            site.nomeDominio = self.nomeDominio
            site.descricaoURL = self.descricaoURL
            
            if(not self.SQLiteConnection.IsConnected()):
                if(not self.SQLiteConnection.Connect()):
                    raise("Erro ao conectar na base.")
            
            site.SQLiteConnection = self.SQLiteConnection
            
            sites = site.Select()
            if(sites.count() <= 0):
                site.Insert()
                
            sqlQuery = " insert into TB_TEXTOS values('"
            sqlQuery = sqlQuery + self.nomeDominio + "', '"
            sqlQuery = sqlQuery + self.descricaoURL + "', "
            sqlQuery = sqlQuery + self.sequencia + ", "
            sqlQuery = sqlQuery + self.tamanho + ", '"
            sqlQuery = sqlQuery + self.font + "', '"
            sqlQuery = sqlQuery + self.cor + "', "
            sqlQuery = sqlQuery + self.tamanhoFont + ", "            
            sqlQuery = sqlQuery + "datetime('now')) "
            
            if(not self.SQLiteConnection.Execute(sqlQuery)):
                raise("Erro ao inserir texto.")
            
        except ValueError:
            LogError.LogError.Save(ValueError)
            raise Exception(ValueError)       
        
        finally:
            self.SQLiteConnection.Disconnect()
            
    def Update(self):
        try:
            if(self.nomeDominio == "" or self.descricaoURL == "" or self.sequencia <= 0):
                raise("O nome do dominio, a descrição da URL e a sequencia não podem ser vazio.")
           
            sqlQuery = " update TB_TEXTOS set "
            sqlQuery = sqlQuery + "QT_TAMANHO = " + self.tamanho + ", "
            sqlQuery = sqlQuery + "DS_FONT = '" + self.font + "', "
            sqlQuery = sqlQuery + "DS_COR = '" + self.cor + "', "
            sqlQuery = sqlQuery + "QT_TAMANHO_FONT = " + self.tamanhoFont + ", "
            sqlQuery = sqlQuery + "DT_TIME_STAMP = datetime('now')) "             
            sqlQuery = sqlQuery + " where NM_DOMINIO = '" + self.nomeDominio + "'"
            sqlQuery = sqlQuery + " and DS_URL = '" + self.descricaoURL + "'"
            sqlQuery = sqlQuery + " and CD_SEQUENCIA = " + self.sequencia
            
            if(not self.SQLiteConnection.IsConnected()):
                if(not self.SQLiteConnection.Connect()):
                    raise("Erro ao conectar na base.")
            
            if(not self.SQLiteConnection.Execute(sqlQuery)):
                raise("Erro ao atualizar texto.")
            
        except ValueError:
            LogError.LogError.Save(ValueError)
            raise Exception(ValueError)       
        
        finally:
            self.SQLiteConnection.Disconnect() 


    def Delete(self):
        try:
            if(self.nomeDominio == "" or self.descricaoURL == "" or self.sequencia <= 0):
                raise("O nome do dominio, a descrição da URL e a sequencia não podem ser vazio.")
           
            sqlQuery = " delete from TB_TEXTOS "             
            sqlQuery = sqlQuery + " where NM_DOMINIO = '" + self.nomeDominio + "'"
            sqlQuery = sqlQuery + " and DS_URL = '" + self.descricaoURL + "'"
            sqlQuery = sqlQuery + " and CD_SEQUENCIA = " + self.sequencia 
            
            if(not self.SQLiteConnection.IsConnected()):
                if(not self.SQLiteConnection.Connect()):
                    raise("Erro ao conectar na base.")
            
            if(not self.SQLiteConnection.Execute(sqlQuery)):
                raise("Erro ao deletar texto.")
            
        except ValueError:
            LogError.LogError.Save(ValueError)
            raise Exception(ValueError)       
        
        finally:
            self.SQLiteConnection.Disconnect() 


    def ToObject(self, row):
        try:
            imagem = Imagem()
            imagem.nomeDominio =  row["NM_DOMINIO"]
            imagem.descricaoURL = row["DS_URL"]
            imagem.sequencia = row["CD_SEQUENCIA"]
            imagem.tamanho = row["QT_TAMANHO"]
            imagem.extencao = row["DS_EXTENCAO"]            
            imagem.timeStamp = row["DT_TIME_STAMP"]
            return imagem  
        except ValueError:
            LogError.LogError.Save(ValueError)
            raise Exception(ValueError)         

    def Select(self):
        try:           
            sqlQuery = " select * from TB_IMAGENS "
            sqlQueryTemp = " where "
            
            if(self.nomeDominio != ""):             
                sqlQuery = sqlQueryTemp + " NM_DOMINIO = '" + self.nomeDominio + "'"
                sqlQueryTemp = " and "
                
            if(self.descricaoURL != ""):             
                sqlQuery = sqlQueryTemp + " DS_URL = '" + self.descricaoURL + "'"
                sqlQueryTemp = " and "
                
            if(self.sequencia > 0):             
                sqlQuery = sqlQueryTemp + " CD_SEQUENCIA = " + self.sequencia             
            
            if(not self.SQLiteConnection.IsConnected()):
                if(not self.SQLiteConnection.Connect()):
                    raise("Erro ao conectar na base.")
            
            rows = self.SQLiteConnection.Select(sqlQuery)
            imagens = []
            for row in rows:
                imagem = self.ToObject(self,row)
                imagens.append(imagem)
                
            return imagens 
        except ValueError:
            LogError.LogError.Save(ValueError)
            raise Exception(ValueError)               
        finally:
            self.SQLiteConnection.Disconnect()